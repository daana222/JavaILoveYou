package Sales_Manager;

import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Kaushaliya
 */
public class Daily_Items_Sales_Entry extends javax.swing.JFrame {
    private static final String DATE_FORMAT = "dd/MM/yyyy"; // Define expected date format

    /**
     * Creates new form Daily_Items_Sales_Entry1
     */
    public Daily_Items_Sales_Entry() {
        initComponents();
        populateComboBox(); // Ensure this is called to populate the combo box on initialization
        addTableSelectionListener(); // To handle row selection logic
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 0, 153));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Sales Manager");

        jButton7.setBackground(new java.awt.Color(255, 255, 204));
        jButton7.setLabel("Dashboard");
        jButton7.setName("btnDashboard1"); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton1.setText("List of Items");
        jButton1.setName("btnListofItems2"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Daily Item Sales Entry");
        jButton2.setName("btnDailyItemSalesEntry2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sales Report");
        jButton3.setName("btnSalesReport2"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Stock Level");
        jButton4.setName("btnStockLevel2"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Create Requisiton");
        jButton5.setName("btnCreateRequisition2"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("List of PO");
        jButton6.setName("btnListofPO2"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel2)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(30, 30, 30)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Item ID", "Item Name", "Quantity Sold", "Selling Price Per Unit", "Total Sales", "Current Stock", "Updated Stock"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextPane1.setName("txtItemName"); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jLabel1.setText("Item Name:");

        jLabel4.setText("Date:");

        jTextPane3.setName("txtDate"); // NOI18N
        jScrollPane4.setViewportView(jTextPane3);

        jLabel5.setText("Quantity Sold:");

        jTextPane4.setName("txtQuantitySold"); // NOI18N
        jScrollPane5.setViewportView(jTextPane4);

        jButton8.setText("Add");
        jButton8.setName("btnAdd"); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setLabel("Edit");
        jButton9.setName("btnEdit"); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Delete");
        jButton10.setName("btnDlelete"); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton12.setText("Generate");
        jButton12.setName("btnGenerate2"); // NOI18N
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel6.setText("Selling Price Per Unit:");

        jLabel7.setText("Current Stock:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item ID", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2)
                        .addGap(217, 217, 217))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton12)
                        .addGap(31, 31, 31)
                        .addComponent(jButton8)
                        .addGap(33, 33, 33)
                        .addComponent(jButton9)
                        .addGap(32, 32, 32)
                        .addComponent(jButton10)
                        .addGap(165, 165, 165))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateComboBox() {
       jComboBox1.removeAllItems();
    jComboBox1.addItem("Item ID"); // Placeholder
    try (BufferedReader reader = new BufferedReader(new FileReader("items.txt"))) {
        String line;
        reader.readLine(); // Skip header
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(",");
            if (parts.length >= 8) { // Ensure valid item row
                jComboBox1.addItem(parts[0]); // Add Item ID
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error loading item IDs: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void addTableSelectionListener() {
    jTable1.getSelectionModel().addListSelectionListener(event -> {
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        jTextPane3.setText(jTable1.getValueAt(selectedRow, 0).toString()); // Date
        jComboBox1.setSelectedItem(jTable1.getValueAt(selectedRow, 1).toString()); // Item ID
        jTextPane1.setText(jTable1.getValueAt(selectedRow, 2).toString()); // Item Name
        jTextPane4.setText(jTable1.getValueAt(selectedRow, 3).toString()); // Quantity Sold
        jTextField1.setText(jTable1.getValueAt(selectedRow, 4).toString()); // Selling Price Per Unit
        jTextField2.setText(jTable1.getValueAt(selectedRow, 6).toString()); // Current Stock
    }
    });
}

    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Main_Dashboard maindashboardFrame = new Main_Dashboard();
        maindashboardFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        List_Of_Items listofitemsFrame = new List_Of_Items();
        listofitemsFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Daily_Items_Sales_Entry dailyitemsalesentryFrame = new Daily_Items_Sales_Entry();
        dailyitemsalesentryFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Sales_Report salesreportFrame = new Sales_Report();
        salesreportFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Stock_Level stocklevelFrame = new Stock_Level();
        stocklevelFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Create_Requisition createrequisitionFrame = new Create_Requisition();
        createrequisitionFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        List_Po listpoFrame = new List_Po();
        listpoFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

        private boolean isValidDate(String date) {
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        sdf.setLenient(false); // Ensures strict date parsing
        try {
            sdf.parse(date); // Attempt to parse the date
            return true;
        } catch (ParseException e) {
            return false; // Return false if parsing fails
        }
    
}

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String date = jTextPane3.getText().trim();
    String itemId = (String) jComboBox1.getSelectedItem();
    String itemName = jTextPane1.getText().trim();
    String quantitySold = jTextPane4.getText().trim();
    String unitPrice = jTextField1.getText().trim();
    String currentStock = jTextField2.getText().trim();

    if (date.isEmpty() || itemId.isEmpty() || itemName.isEmpty() || quantitySold.isEmpty() || unitPrice.isEmpty() || currentStock.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields must be filled.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (!isValidDate(date)) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Please use dd/MM/yyyy.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int qtySold = Integer.parseInt(quantitySold);
        double price = Double.parseDouble(unitPrice.replace("RM", "").trim());
        int stock = Integer.parseInt(currentStock);

        if (qtySold > stock) {
            JOptionPane.showMessageDialog(this, "Quantity sold exceeds current stock.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int updatedStock = stock - qtySold;
        double totalSales = qtySold * price;

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.insertRow(0, new Object[]{
            date, itemId, itemName, qtySold, "RM" + String.format("%.2f", price), "RM" + String.format("%.2f", totalSales), stock, updatedStock
        });

        saveDataToFiles();
        clearFields();
        JOptionPane.showMessageDialog(this, "Entry added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid number format for Quantity Sold, Unit Price, or Current Stock.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
          int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to edit.", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    String date = jTextPane3.getText().trim();
    String itemId = (String) jComboBox1.getSelectedItem();
    String itemName = jTextPane1.getText().trim();
    String quantitySold = jTextPane4.getText().trim();
    String unitPrice = jTextField1.getText().trim();
    String currentStock = jTextField2.getText().trim();

    if (date.isEmpty() || itemId.isEmpty() || itemName.isEmpty() || quantitySold.isEmpty() || unitPrice.isEmpty() || currentStock.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields must be filled.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (!isValidDate(date)) {
        JOptionPane.showMessageDialog(this, "Invalid date format. Please use dd/MM/yyyy.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int qtySold = Integer.parseInt(quantitySold);
        double price = Double.parseDouble(unitPrice.replace("RM", "").trim());
        int stock = Integer.parseInt(currentStock);

        if (qtySold > stock) {
            JOptionPane.showMessageDialog(this, "Quantity sold exceeds current stock.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int updatedStock = stock - qtySold;
        double totalSales = qtySold * price;

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setValueAt(date, selectedRow, 0);
        model.setValueAt(itemId, selectedRow, 1);
        model.setValueAt(itemName, selectedRow, 2);
        model.setValueAt(qtySold, selectedRow, 3);
        model.setValueAt("RM" + String.format("%.2f", price), selectedRow, 4);
        model.setValueAt("RM" + String.format("%.2f", totalSales), selectedRow, 5);
        model.setValueAt(stock, selectedRow, 6); // Keep current stock level as is
        model.setValueAt(updatedStock, selectedRow, 7); // Set updated stock value

        saveDataToFiles();
        clearFields();
        JOptionPane.showMessageDialog(this, "Entry edited successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid number format for Quantity Sold, Unit Price, or Current Stock.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    // Retrieve the row data
    String itemId = (String) model.getValueAt(selectedRow, 1);
    int quantitySold = Integer.parseInt(model.getValueAt(selectedRow, 3).toString());
    int currentStock = Integer.parseInt(model.getValueAt(selectedRow, 6).toString());

    // Recalculate the stock level
    int updatedStock = currentStock + quantitySold;

    // Update items.txt to reflect the change
    try (BufferedReader itemsReader = new BufferedReader(new FileReader("items.txt"))) {
        StringBuilder updatedContent = new StringBuilder();
        String line = itemsReader.readLine(); // Read and retain the header
        updatedContent.append(line).append("\n");

        while ((line = itemsReader.readLine()) != null) {
            String[] parts = line.split(",");
            if (parts[0].equals(itemId)) {
                parts[3] = String.valueOf(updatedStock); // Update Current Stock Level
                parts[7] = new SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date()); // Update Last Updated Date
            }
            updatedContent.append(String.join(",", parts)).append("\n");
        }

        try (BufferedWriter itemsWriter = new BufferedWriter(new FileWriter("items.txt"))) {
            itemsWriter.write(updatedContent.toString());
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error updating items.txt: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Remove the row from the table
    model.removeRow(selectedRow);
    saveSalesDataToFile();
    clearFields();
    JOptionPane.showMessageDialog(this, "Entry deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
}

private void saveSalesDataToFile() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

    try (BufferedWriter salesWriter = new BufferedWriter(new FileWriter("sales.txt", false))) {
        salesWriter.write("Date,ItemID,Item Name,Quantity Sold,Selling Price Per Unit,Total Sales\n");

        for (int i = 0; i < model.getRowCount(); i++) {
            String date = model.getValueAt(i, 0).toString();
            String itemId = model.getValueAt(i, 1).toString();
            String itemName = model.getValueAt(i, 2).toString();
            String quantitySold = model.getValueAt(i, 3).toString();
            String unitPrice = model.getValueAt(i, 4).toString();
            String totalSales = model.getValueAt(i, 5).toString();

            salesWriter.write(String.join(",", date, itemId, itemName, quantitySold, unitPrice, totalSales));
            salesWriter.write("\n");
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving to sales.txt: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
           DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear the table to avoid duplicate entries

    try (
        BufferedReader salesReader = new BufferedReader(new FileReader("sales.txt"));
        BufferedReader itemsReader = new BufferedReader(new FileReader("items.txt"))
    ) {
        // Load items.txt data into a map for quick access
        Map<String, String[]> itemsDataMap = new HashMap<>();
        String itemsLine;

        // Read and process items.txt
        itemsReader.readLine(); // Skip the header
        while ((itemsLine = itemsReader.readLine()) != null) {
            String[] itemsParts = itemsLine.split(",");
            if (itemsParts.length >= 8) { // Ensure valid row
                String itemId = itemsParts[0];
                itemsDataMap.put(itemId, itemsParts); // Map ItemID to its row data
            }
        }

        // Read and process sales.txt
        String salesLine;
        salesReader.readLine(); // Skip the header
        while ((salesLine = salesReader.readLine()) != null) {
            String[] salesParts = salesLine.split(",");
            if (salesParts.length >= 6) { // Ensure valid sales row
                String date = salesParts[0];
                String itemId = salesParts[1];
                String itemName = salesParts[2];
                String quantitySold = salesParts[3];
                String unitPrice = salesParts[4];
                String totalSales = salesParts[5];

                // Fetch Current Stock Level and Reorder Level from items.txt
                String[] itemsData = itemsDataMap.get(itemId);
                if (itemsData != null) {
                    String currentStock = itemsData[3]; // Current Stock Level
                    String reorderLevel = itemsData[4]; // Reorder Level

                    // Add row to the table
                    model.addRow(new Object[]{
                        date, itemId, itemName, quantitySold, unitPrice, totalSales, currentStock, reorderLevel
                    });
                }
            }
        }

        // Show a message if no data is loaded
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No data available in sales.txt or items.txt.", "No Data", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error generating data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
         String selectedItemId = (String) jComboBox1.getSelectedItem();
    if (selectedItemId != null && !selectedItemId.trim().isEmpty() && !selectedItemId.equals("Item ID")) {
        try (BufferedReader reader = new BufferedReader(new FileReader("items.txt"))) {
            String line;
            reader.readLine(); // Skip header line
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length >= 8 && parts[0].trim().equals(selectedItemId.trim())) {
                    jTextPane1.setText(parts[1]); // Set Item Name
                    jTextField1.setText("RM" + parts[6]); // Add RM format for Selling Price
                    jTextField2.setText(parts[3]); // Set Current Stock Level
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading item details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        jTextPane1.setText("");
        jTextField1.setText("");
        jTextField2.setText("");
    }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void clearFields() {
        jTextPane3.setText("");
        jComboBox1.setSelectedIndex(0);
        jTextPane1.setText("");
        jTextPane4.setText("");
        jTextField1.setText("");
        jTextField2.setText("");

    }
    
    private void saveDataToFiles() {
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    Map<String, String[]> itemsDataMap = new HashMap<>();

    // Load items.txt into a map
    try (BufferedReader itemsReader = new BufferedReader(new FileReader("items.txt"))) {
        String line;
        itemsReader.readLine(); // Skip header
        while ((line = itemsReader.readLine()) != null) {
            String[] parts = line.split(",");
            if (parts.length >= 8) { // Ensure valid item row
                itemsDataMap.put(parts[0], parts); // Map ItemID to its full row
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error reading items.txt: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Save data back to sales.txt and items.txt
    try (BufferedWriter salesWriter = new BufferedWriter(new FileWriter("sales.txt", false));
         BufferedWriter itemsWriter = new BufferedWriter(new FileWriter("items.txt", false))) {

        // Write headers
        salesWriter.write("Date,ItemID,Item Name,Quantity Sold,Selling Price Per Unit,Total Sales\n");
        itemsWriter.write("itemID,item Name,Supplier ID,Current Stock Level,Reorder Level,Cost perunit,Selling Price Unit,Last Updated Date\n");

        // Iterate over table rows to save data
        for (int i = 0; i < model.getRowCount(); i++) {
            String date = model.getValueAt(i, 0).toString();
            String itemId = model.getValueAt(i, 1).toString();
            String itemName = model.getValueAt(i, 2).toString();
            String quantitySold = model.getValueAt(i, 3).toString();
            String unitPrice = model.getValueAt(i, 4).toString().replace("RM", "").trim();
            String totalSales = model.getValueAt(i, 5).toString();
            String updatedStock = model.getValueAt(i, 7).toString();

            // Write to sales.txt
            salesWriter.write(date + "," + itemId + "," + itemName + "," + quantitySold + ",RM" + unitPrice + "," + totalSales + "\n");

            // Update items.txt data
            if (itemsDataMap.containsKey(itemId)) {
                String[] itemData = itemsDataMap.get(itemId);
                itemData[3] = updatedStock; // Update current stock level
                itemData[7] = date;         // Update last updated date
            }
        }

        // Write updated items data back to items.txt
        for (String[] itemData : itemsDataMap.values()) {
            itemsWriter.write(String.join(",", itemData) + "\n");
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error saving data to files: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Daily_Items_Sales_Entry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Daily_Items_Sales_Entry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Daily_Items_Sales_Entry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Daily_Items_Sales_Entry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Daily_Items_Sales_Entry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    // End of variables declaration//GEN-END:variables

    }
